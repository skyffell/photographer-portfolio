from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# File to store messages (instead of email)
MESSAGES_FILE = 'messages.json'

class ContactService:
    def __init__(self):
        self.messages_file = MESSAGES_FILE
    
    def save_message(self, form_data):
        try:
            # Create messages file if it doesn't exist
            if not os.path.exists(self.messages_file):
                with open(self.messages_file, 'w', encoding='utf-8') as f:
                    json.dump([], f)
            
            # Read existing messages
            with open(self.messages_file, 'r', encoding='utf-8') as f:
                messages = json.load(f)
            
            # Add new message
            new_message = {
                'id': len(messages) + 1,
                'timestamp': datetime.now().isoformat(),
                'name': form_data['name'],
                'email': form_data['email'],
                'phone': form_data.get('phone', ''),
                'service': form_data.get('service', ''),
                'message': form_data['message'],
                'read': False
            }
            
            messages.append(new_message)
            
            # Save back to file
            with open(self.messages_file, 'w', encoding='utf-8') as f:
                json.dump(messages, f, ensure_ascii=False, indent=2)
            
            # Print to console for demo
            print("=" * 50)
            print("üìß –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –°–ê–ô–¢–ê")
            print("=" * 50)
            print(f"üë§ –ò–º—è: {form_data['name']}")
            print(f"üìß Email: {form_data['email']}")
            print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {form_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"üéØ –£—Å–ª—É–≥–∞: {form_data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {form_data['message']}")
            print(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("=" * 50)
            
            return True, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            
        except Exception as e:
            print(f"‚ùå Error saving message: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"

contact_service = ContactService()

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "healthy", 
        "service": "Alex Vision API",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/api/contact', methods=['POST', 'OPTIONS'])
def contact():
    if request.method == 'OPTIONS':
        return jsonify({}), 200
        
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"
            }), 400
        
        # Validate required fields
        required_fields = ['name', 'email', 'message']
        for field in required_fields:
            if not data.get(field):
                return jsonify({
                    "success": False,
                    "message": f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
                }), 400
        
        # Save message
        success, message = contact_service.save_message(data)
        
        if success:
            return jsonify({
                "success": True,
                "message": message
            }), 200
        else:
            return jsonify({
                "success": False,
                "message": message
            }), 500
            
    except Exception as e:
        print(f"‚ùå Contact error: {str(e)}")
        return jsonify({
            "success": False,
            "message": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/messages', methods=['GET'])
def get_messages():
    """Endpoint to view saved messages (for admin)"""
    try:
        if os.path.exists(MESSAGES_FILE):
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                messages = json.load(f)
            return jsonify({
                "success": True,
                "messages": messages
            })
        else:
            return jsonify({
                "success": True,
                "messages": []
            })
    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"Error reading messages: {str(e)}"
        }), 500

@app.route('/api/test', methods=['GET'])
def test():
    return jsonify({
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
        "endpoints": {
            "health": "/api/health",
            "contact": "/api/contact",
            "messages": "/api/messages",
            "test": "/api/test"
        }
    })

if __name__ == '__main__':
    print("üöÄ Starting Alex Vision API...")
    print("üíæ Message storage: JSON FILE")
    print("üåê API will be available at: http://localhost:5000")
    print("üìã Available endpoints:")
    print("   GET  /api/health    - Health check")
    print("   POST /api/contact   - Send message")
    print("   GET  /api/messages  - View messages (admin)")
    print("   GET  /api/test      - Test endpoint")
    print("\nüí° Messages will be saved to messages.json")
    app.run(debug=True, host='0.0.0.0', port=5000)